// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createuser = `-- name: Createuser :one
INSERT INTO users(
  full_name, supervisor
) VALUES (
  $1, $2
)
RETURNING id, full_name, created_at, supervisor, commits
`

type CreateuserParams struct {
	FullName   sql.NullString `json:"full_name"`
	Supervisor sql.NullBool   `json:"supervisor"`
}

func (q *Queries) Createuser(ctx context.Context, arg CreateuserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createuser, arg.FullName, arg.Supervisor)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.Supervisor,
		&i.Commits,
	)
	return i, err
}

const deleteuser = `-- name: Deleteuser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) Deleteuser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteuser, id)
	return err
}

const getuser = `-- name: Getuser :one
SELECT id, full_name, created_at, supervisor, commits FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getuser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getuser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.Supervisor,
		&i.Commits,
	)
	return i, err
}

const listusers = `-- name: Listusers :many
SELECT id, full_name, created_at, supervisor, commits FROM users
ORDER BY full_name
`

func (q *Queries) Listusers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.CreatedAt,
			&i.Supervisor,
			&i.Commits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateuser = `-- name: Updateuser :exec
UPDATE users
set full_name = $2,
supervisor = $3
WHERE id = $1
`

type UpdateuserParams struct {
	ID         int32          `json:"id"`
	FullName   sql.NullString `json:"full_name"`
	Supervisor sql.NullBool   `json:"supervisor"`
}

func (q *Queries) Updateuser(ctx context.Context, arg UpdateuserParams) error {
	_, err := q.db.ExecContext(ctx, updateuser, arg.ID, arg.FullName, arg.Supervisor)
	return err
}

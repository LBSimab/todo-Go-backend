// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const createtask = `-- name: Createtask :one
INSERT INTO tasks(
  name, supervisor,category
) VALUES (
  $1, $2, $3
)
RETURNING id, name, finished, supervisor, created_at, category
`

type CreatetaskParams struct {
	Name       sql.NullString `json:"name"`
	Supervisor sql.NullInt32  `json:"supervisor"`
	Category   sql.NullString `json:"category"`
}

func (q *Queries) Createtask(ctx context.Context, arg CreatetaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createtask, arg.Name, arg.Supervisor, arg.Category)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Finished,
		&i.Supervisor,
		&i.CreatedAt,
		&i.Category,
	)
	return i, err
}

const deletetask = `-- name: Deletetask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) Deletetask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletetask, id)
	return err
}

const gettask = `-- name: Gettask :one
SELECT id, name, finished, supervisor, created_at, category FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) Gettask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, gettask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Finished,
		&i.Supervisor,
		&i.CreatedAt,
		&i.Category,
	)
	return i, err
}

const listtasks = `-- name: Listtasks :many
SELECT id, name, finished, supervisor, created_at, category FROM tasks
ORDER BY name
`

func (q *Queries) Listtasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listtasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Finished,
			&i.Supervisor,
			&i.CreatedAt,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatetask = `-- name: Updatetask :exec
UPDATE tasks
set name = $2,
supervisor = $3
WHERE id = $1
`

type UpdatetaskParams struct {
	ID         int32          `json:"id"`
	Name       sql.NullString `json:"name"`
	Supervisor sql.NullInt32  `json:"supervisor"`
}

func (q *Queries) Updatetask(ctx context.Context, arg UpdatetaskParams) error {
	_, err := q.db.ExecContext(ctx, updatetask, arg.ID, arg.Name, arg.Supervisor)
	return err
}
